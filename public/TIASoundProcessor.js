class TIASoundProcessor extends AudioWorkletProcessor{constructor(){super();this.SAMPLE_RATE=48000;this.TIA_SAMPLE_RATE=31440;this.reset();this.setPoly();this.AUDV=0;this.AUDC=0;this.AUDF=0;this.buffer=new Float32Array(128);this.port.onmessage=(event)=>{this.reset();const{AUDV,AUDC,AUDF}=event.data;this.AUDV=this.clamp(AUDV,0,15);this.AUDC=this.clamp(AUDC,0,15);this.AUDF=this.clamp(AUDF,0,31)}}clamp(value,min,max){return Math.min(Math.max(value,min),max)}setPoly(){const p0=[1,-1];const p1=[1,1,-1];const p2=[16,15,-1];const p3=[1,2,2,1,1,1,4,3,-1];const p4=[1,2,1,1,2,2,5,4,2,1,3,1,1,1,1,4,-1];const p5=[1,4,1,3,2,4,1,2,3,2,1,1,1,1,1,1,2,4,2,1,4,1,1,2,2,1,3,2,1,3,1,1,1,4,1,1,1,1,2,1,1,2,6,1,2,2,1,2,1,2,1,1,2,1,6,2,1,2,2,1,1,1,1,2,2,2,2,7,2,3,2,2,1,1,1,3,2,1,1,2,1,1,7,1,1,3,1,1,2,3,3,1,1,1,2,2,1,1,2,2,4,3,5,1,3,1,1,5,2,1,1,1,2,1,2,1,3,1,2,5,1,1,2,1,1,1,5,1,1,1,1,1,1,1,1,6,1,1,1,2,1,1,1,1,4,2,1,1,3,1,3,6,3,2,3,1,1,2,1,2,4,1,1,1,3,1,1,1,1,3,1,2,1,4,2,2,3,4,1,1,4,1,2,1,2,2,2,1,1,4,3,1,4,4,9,5,4,1,5,3,1,1,3,2,2,2,1,5,1,2,1,1,1,2,3,1,2,1,1,3,4,2,5,2,2,1,2,3,1,1,1,1,1,2,1,3,3,3,2,1,2,1,1,1,1,1,3,3,1,2,2,3,1,3,1,8,-1];const p6=[5,6,4,5,10,5,3,7,4,10,6,3,6,4,9,6,-1];const p7=[2,3,2,1,4,1,6,10,2,4,2,1,1,4,5,9,3,3,4,1,1,1,8,5,5,5,4,1,1,1,8,4,2,8,3,3,1,1,7,4,2,7,5,1,3,1,7,4,1,4,8,2,1,3,4,7,1,3,7,3,2,1,6,6,2,2,4,5,3,2,6,6,1,3,3,2,5,3,7,3,4,3,2,2,2,5,9,3,1,5,3,1,2,2,11,5,1,5,3,1,1,2,12,5,1,2,5,2,1,1,12,6,1,2,5,1,2,1,10,6,3,2,2,4,1,2,6,10,-1];this.polys=[p0,p3,p3,p7,p1,p1,p2,p4,p5,p4,p2,p0,p1,p1,p2,p6];this.divisors=[1,1,15,1,1,1,1,1,1,1,1,1,3,3,3,1]}reset(){this.state={offset:0,count:0,last:1,f:0,rate:0}}process(input,outputs,parameters){const output=outputs[0];let rate=0;let bufferIndex=0;const divisor=this.divisors[this.AUDC]*(this.AUDF+1);const volume=this.AUDV/30;while(bufferIndex<this.buffer.length){this.state.f+=1;if(this.state.f===divisor){this.poly=this.polys[this.AUDC];this.state.f=0;this.state.count+=1;if(this.state.count===this.poly[this.state.offset]){this.state.offset+=1;this.state.count=0;if(this.poly[this.state.offset]===-1){this.state.offset=0}}this.state.last=(this.state.offset%2===0)?1:0}rate+=this.SAMPLE_RATE;while(rate>=this.TIA_SAMPLE_RATE){const s=this.state.last?1:0;this.buffer[bufferIndex]=s*volume;bufferIndex+=1;rate-=this.TIA_SAMPLE_RATE}}output[0].set(this.buffer);return true}}registerProcessor('TIASoundProcessor',TIASoundProcessor);